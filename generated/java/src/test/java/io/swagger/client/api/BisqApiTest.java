/*
 * The Bisq API
 * API for the Bisq exchange
 *
 * OpenAPI spec version: 1
 * Contact: Use the Bisq's project support channels
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccountList;
import java.math.BigDecimal;
import io.swagger.client.model.CurrencyList;
import io.swagger.client.model.MarketList;
import io.swagger.client.model.OfferDetail;
import io.swagger.client.model.WalletAddress;
import io.swagger.client.model.WalletDetails;
import io.swagger.client.model.WalletTransactions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BisqApi
 */
@Ignore
public class BisqApiTest {

    private final BisqApi api = new BisqApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void accountListTest() throws ApiException {
        AccountList response = api.accountList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void currencyListTest() throws ApiException {
        CurrencyList response = api.currencyList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void marketListTest() throws ApiException {
        MarketList response = api.marketList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFundsToBisqWalletTest() throws ApiException {
        String tradeId = null;
        Boolean response = api.moveFundsToBisqWallet(tradeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void offerCancelTest() throws ApiException {
        String offerId = null;
        Boolean response = api.offerCancel(offerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void offerDetailTest() throws ApiException {
        String offerId = null;
        OfferDetail response = api.offerDetail(offerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void offerListTest() throws ApiException {
        String market = null;
        String status = null;
        String whose = null;
        Long start = null;
        Long end = null;
        Integer limit = null;
        List<OfferDetail> response = api.offerList(market, status, whose, start, end, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void offerMakeTest() throws ApiException {
        String direction = null;
        String priceType = null;
        String marketPair = null;
        BigDecimal amount = null;
        BigDecimal minAmount = null;
        String paymentAccountId = null;
        Double percentageFromMarketPrice = null;
        String fixedPrice = null;
        Boolean response = api.offerMake(direction, priceType, marketPair, amount, minAmount, paymentAccountId, percentageFromMarketPrice, fixedPrice);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void offerTakeTest() throws ApiException {
        String offerId = null;
        String paymentAccountId = null;
        String amount = null;
        Boolean response = api.offerTake(offerId, paymentAccountId, amount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentReceivedTest() throws ApiException {
        String tradeId = null;
        Boolean response = api.paymentReceived(tradeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentStartedTest() throws ApiException {
        String tradeId = null;
        Boolean response = api.paymentStarted(tradeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tradeDetailTest() throws ApiException {
        String tradeId = null;
        String response = api.tradeDetail(tradeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tradeListTest() throws ApiException {
        String response = api.tradeList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletAddressesTest() throws ApiException {
        String status = null;
        Integer start = null;
        Integer limit = null;
        List<WalletAddress> response = api.walletAddresses(status, start, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletDetailTest() throws ApiException {
        WalletDetails response = api.walletDetail();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletTransactionListTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        Integer limit = null;
        WalletTransactions response = api.walletTransactionList(start, end, limit);

        // TODO: test validations
    }
    
}
