/**
 * The Bisq API
 * API for the Bisq exchange
 *
 * OpenAPI spec version: 1
 * Contact: Use the Bisq's project support channels
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountList from '../model/AccountList';
import CurrencyList from '../model/CurrencyList';
import MarketList from '../model/MarketList';
import OfferDetail from '../model/OfferDetail';
import WalletAddress from '../model/WalletAddress';
import WalletDetails from '../model/WalletDetails';
import WalletTransactions from '../model/WalletTransactions';

/**
* Bisq service.
* @module api/BisqApi
* @version 1
*/
export default class BisqApi {

    /**
    * Constructs a new BisqApi. 
    * @alias module:api/BisqApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountList operation.
     * @callback module:api/BisqApi~accountListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BisqApi~accountListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountList}
     */
    accountList(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountList;

      return this.apiClient.callApi(
        '/api/v1/account_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the currencyList operation.
     * @callback module:api/BisqApi~currencyListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BisqApi~currencyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyList}
     */
    currencyList(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrencyList;

      return this.apiClient.callApi(
        '/api/v1/currency_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the marketList operation.
     * @callback module:api/BisqApi~marketListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BisqApi~marketListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketList}
     */
    marketList(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketList;

      return this.apiClient.callApi(
        '/api/v1/market_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveFundsToBisqWallet operation.
     * @callback module:api/BisqApi~moveFundsToBisqWalletCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.tradeId 
     * @param {module:api/BisqApi~moveFundsToBisqWalletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    moveFundsToBisqWallet(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'trade_id': opts['tradeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/move_funds_to_bisq_wallet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the offerCancel operation.
     * @callback module:api/BisqApi~offerCancelCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.offerId 
     * @param {module:api/BisqApi~offerCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    offerCancel(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'offer_id': opts['offerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/offer_cancel', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the offerDetail operation.
     * @callback module:api/BisqApi~offerDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.offerId 
     * @param {module:api/BisqApi~offerDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferDetail}
     */
    offerDetail(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'offer_id': opts['offerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OfferDetail;

      return this.apiClient.callApi(
        '/api/v1/offer_detail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the offerList operation.
     * @callback module:api/BisqApi~offerListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.market  (default to all)
     * @param {String} opts.status  (default to all)
     * @param {String} opts.whose  (default to all)
     * @param {Number} opts.start  (default to 0)
     * @param {Number} opts.end 
     * @param {Number} opts.limit  (default to 100)
     * @param {module:api/BisqApi~offerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferDetail>}
     */
    offerList(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'market': opts['market'],
        'status': opts['status'],
        'whose': opts['whose'],
        'start': opts['start'],
        'end': opts['end'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferDetail];

      return this.apiClient.callApi(
        '/api/v1/offer_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the offerMake operation.
     * @callback module:api/BisqApi~offerMakeCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} direction 
     * @param {module:model/String} priceType 
     * @param {String} marketPair 
     * @param {Number} amount 
     * @param {Number} minAmount 
     * @param {Object} opts Optional parameters
     * @param {String} opts.paymentAccountId 
     * @param {Number} opts.percentageFromMarketPrice  (default to 0.0)
     * @param {String} opts.fixedPrice  (default to 0)
     * @param {module:api/BisqApi~offerMakeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    offerMake(direction, priceType, marketPair, amount, minAmount, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling offerMake");
      }

      // verify the required parameter 'priceType' is set
      if (priceType === undefined || priceType === null) {
        throw new Error("Missing the required parameter 'priceType' when calling offerMake");
      }

      // verify the required parameter 'marketPair' is set
      if (marketPair === undefined || marketPair === null) {
        throw new Error("Missing the required parameter 'marketPair' when calling offerMake");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling offerMake");
      }

      // verify the required parameter 'minAmount' is set
      if (minAmount === undefined || minAmount === null) {
        throw new Error("Missing the required parameter 'minAmount' when calling offerMake");
      }


      let pathParams = {
      };
      let queryParams = {
        'payment_account_id': opts['paymentAccountId'],
        'direction': direction,
        'price_type': priceType,
        'market_pair': marketPair,
        'percentage_from_market_price': opts['percentageFromMarketPrice'],
        'fixed_price': opts['fixedPrice'],
        'amount': amount,
        'min_amount': minAmount
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/offer_make', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the offerTake operation.
     * @callback module:api/BisqApi~offerTakeCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.offerId 
     * @param {String} opts.paymentAccountId 
     * @param {String} opts.amount 
     * @param {module:api/BisqApi~offerTakeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    offerTake(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'offer_id': opts['offerId'],
        'payment_account_id': opts['paymentAccountId'],
        'amount': opts['amount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/offer_take', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentReceived operation.
     * @callback module:api/BisqApi~paymentReceivedCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.tradeId 
     * @param {module:api/BisqApi~paymentReceivedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    paymentReceived(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'trade_id': opts['tradeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/payment_received', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentStarted operation.
     * @callback module:api/BisqApi~paymentStartedCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.tradeId 
     * @param {module:api/BisqApi~paymentStartedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    paymentStarted(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'trade_id': opts['tradeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/payment_started', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tradeDetail operation.
     * @callback module:api/BisqApi~tradeDetailCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.tradeId 
     * @param {module:api/BisqApi~tradeDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    tradeDetail(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'trade_id': opts['tradeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/trade_detail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tradeList operation.
     * @callback module:api/BisqApi~tradeListCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BisqApi~tradeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    tradeList(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/trade_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletAddresses operation.
     * @callback module:api/BisqApi~walletAddressesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WalletAddress>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.status  (default to BOTH)
     * @param {Number} opts.start  (default to 0)
     * @param {Number} opts.limit  (default to 100)
     * @param {module:api/BisqApi~walletAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WalletAddress>}
     */
    walletAddresses(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WalletAddress];

      return this.apiClient.callApi(
        '/api/v1/wallet_addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletDetail operation.
     * @callback module:api/BisqApi~walletDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BisqApi~walletDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletDetails}
     */
    walletDetail(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletDetails;

      return this.apiClient.callApi(
        '/api/v1/wallet_detail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the walletTransactionList operation.
     * @callback module:api/BisqApi~walletTransactionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start  (default to 0)
     * @param {Number} opts.end  (default to 2147483647)
     * @param {Number} opts.limit  (default to 100)
     * @param {module:api/BisqApi~walletTransactionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletTransactions}
     */
    walletTransactionList(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletTransactions;

      return this.apiClient.callApi(
        '/api/v1/wallet_tx_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
