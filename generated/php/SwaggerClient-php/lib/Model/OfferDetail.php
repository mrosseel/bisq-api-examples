<?php
/**
 * OfferDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * The Bisq API
 *
 * API for the Bisq exchange
 *
 * OpenAPI spec version: 1
 * Contact: Use the Bisq's project support channels
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer_id' => 'string',
        'direction' => 'string',
        'state' => 'string',
        'created' => '\DateTime',
        'arbitrators' => 'string[]',
        'offerer' => 'string',
        'btc_amount' => 'string',
        'min_btc_amount' => 'string',
        'other_amount' => 'string',
        'other_currency' => 'string',
        'price_detail' => '\Swagger\Client\Model\PriceDetail'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'offer_id' => null,
        'direction' => null,
        'state' => null,
        'created' => 'date-time',
        'arbitrators' => null,
        'offerer' => null,
        'btc_amount' => null,
        'min_btc_amount' => null,
        'other_amount' => null,
        'other_currency' => null,
        'price_detail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_id' => 'offer_id',
        'direction' => 'direction',
        'state' => 'state',
        'created' => 'created',
        'arbitrators' => 'arbitrators',
        'offerer' => 'offerer',
        'btc_amount' => 'btc_amount',
        'min_btc_amount' => 'min_btc_amount',
        'other_amount' => 'other_amount',
        'other_currency' => 'other_currency',
        'price_detail' => 'price_detail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offer_id' => 'setOfferId',
        'direction' => 'setDirection',
        'state' => 'setState',
        'created' => 'setCreated',
        'arbitrators' => 'setArbitrators',
        'offerer' => 'setOfferer',
        'btc_amount' => 'setBtcAmount',
        'min_btc_amount' => 'setMinBtcAmount',
        'other_amount' => 'setOtherAmount',
        'other_currency' => 'setOtherCurrency',
        'price_detail' => 'setPriceDetail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offer_id' => 'getOfferId',
        'direction' => 'getDirection',
        'state' => 'getState',
        'created' => 'getCreated',
        'arbitrators' => 'getArbitrators',
        'offerer' => 'getOfferer',
        'btc_amount' => 'getBtcAmount',
        'min_btc_amount' => 'getMinBtcAmount',
        'other_amount' => 'getOtherAmount',
        'other_currency' => 'getOtherCurrency',
        'price_detail' => 'getPriceDetail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIRECTION_BUY = 'BUY';
    const DIRECTION_SELL = 'SELL';
    const STATE_UNKNOWN = 'UNKNOWN';
    const STATE_OFFER_FEE_PAID = 'OFFER_FEE_PAID';
    const STATE_AVAILABLE = 'AVAILABLE';
    const STATE_NOT_AVAILABLE = 'NOT_AVAILABLE';
    const STATE_REMOVED = 'REMOVED';
    const STATE_MAKER_OFFLINE = 'MAKER_OFFLINE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_BUY,
            self::DIRECTION_SELL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_UNKNOWN,
            self::STATE_OFFER_FEE_PAID,
            self::STATE_AVAILABLE,
            self::STATE_NOT_AVAILABLE,
            self::STATE_REMOVED,
            self::STATE_MAKER_OFFLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['arbitrators'] = isset($data['arbitrators']) ? $data['arbitrators'] : null;
        $this->container['offerer'] = isset($data['offerer']) ? $data['offerer'] : null;
        $this->container['btc_amount'] = isset($data['btc_amount']) ? $data['btc_amount'] : null;
        $this->container['min_btc_amount'] = isset($data['min_btc_amount']) ? $data['min_btc_amount'] : null;
        $this->container['other_amount'] = isset($data['other_amount']) ? $data['other_amount'] : null;
        $this->container['other_currency'] = isset($data['other_currency']) ? $data['other_currency'] : null;
        $this->container['price_detail'] = isset($data['price_detail']) ? $data['price_detail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!in_array($this->container['direction'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getDirectionAllowableValues();
        if (!in_array($this->container['direction'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id offer_id
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction direction
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets arbitrators
     *
     * @return string[]
     */
    public function getArbitrators()
    {
        return $this->container['arbitrators'];
    }

    /**
     * Sets arbitrators
     *
     * @param string[] $arbitrators arbitrators
     *
     * @return $this
     */
    public function setArbitrators($arbitrators)
    {
        $this->container['arbitrators'] = $arbitrators;

        return $this;
    }

    /**
     * Gets offerer
     *
     * @return string
     */
    public function getOfferer()
    {
        return $this->container['offerer'];
    }

    /**
     * Sets offerer
     *
     * @param string $offerer offerer
     *
     * @return $this
     */
    public function setOfferer($offerer)
    {
        $this->container['offerer'] = $offerer;

        return $this;
    }

    /**
     * Gets btc_amount
     *
     * @return string
     */
    public function getBtcAmount()
    {
        return $this->container['btc_amount'];
    }

    /**
     * Sets btc_amount
     *
     * @param string $btc_amount btc_amount
     *
     * @return $this
     */
    public function setBtcAmount($btc_amount)
    {
        $this->container['btc_amount'] = $btc_amount;

        return $this;
    }

    /**
     * Gets min_btc_amount
     *
     * @return string
     */
    public function getMinBtcAmount()
    {
        return $this->container['min_btc_amount'];
    }

    /**
     * Sets min_btc_amount
     *
     * @param string $min_btc_amount min_btc_amount
     *
     * @return $this
     */
    public function setMinBtcAmount($min_btc_amount)
    {
        $this->container['min_btc_amount'] = $min_btc_amount;

        return $this;
    }

    /**
     * Gets other_amount
     *
     * @return string
     */
    public function getOtherAmount()
    {
        return $this->container['other_amount'];
    }

    /**
     * Sets other_amount
     *
     * @param string $other_amount other_amount
     *
     * @return $this
     */
    public function setOtherAmount($other_amount)
    {
        $this->container['other_amount'] = $other_amount;

        return $this;
    }

    /**
     * Gets other_currency
     *
     * @return string
     */
    public function getOtherCurrency()
    {
        return $this->container['other_currency'];
    }

    /**
     * Sets other_currency
     *
     * @param string $other_currency other_currency
     *
     * @return $this
     */
    public function setOtherCurrency($other_currency)
    {
        $this->container['other_currency'] = $other_currency;

        return $this;
    }

    /**
     * Gets price_detail
     *
     * @return \Swagger\Client\Model\PriceDetail
     */
    public function getPriceDetail()
    {
        return $this->container['price_detail'];
    }

    /**
     * Sets price_detail
     *
     * @param \Swagger\Client\Model\PriceDetail $price_detail price_detail
     *
     * @return $this
     */
    public function setPriceDetail($price_detail)
    {
        $this->container['price_detail'] = $price_detail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


