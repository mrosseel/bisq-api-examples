<?php
/**
 * OfferDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accepted_bank_ids' => 'string[]',
        'accepted_country_codes' => 'string[]',
        'amount' => 'int',
        'arbitrator_node_addresses' => 'string[]',
        'bank_id' => 'string',
        'base_currency_code' => 'string',
        'block_height_at_offer_creation' => 'int',
        'buyer_security_deposit' => 'int',
        'counter_currency_code' => 'string',
        'country_code' => 'string',
        'currency_code' => 'string',
        'date' => '\DateTime',
        'direction' => 'string',
        'hash_of_challenge' => 'string',
        'id' => 'string',
        'is_currency_for_maker_fee_btc' => 'bool',
        'is_private_offer' => 'bool',
        'lower_close_price' => 'int',
        'maker_fee' => 'int',
        'maker_payment_account_id' => 'string',
        'market_price_margin' => 'double',
        'max_trade_limit' => 'int',
        'max_trade_period' => 'int',
        'min_amount' => 'int',
        'offer_fee_payment_tx_id' => 'string',
        'owner_node_address' => 'string',
        'payment_method_id' => 'string',
        'price' => 'int',
        'protocol_version' => 'int',
        'seller_security_deposit' => 'int',
        'state' => 'string',
        'tx_fee' => 'int',
        'upper_close_price' => 'int',
        'use_auto_close' => 'bool',
        'use_market_based_price' => 'bool',
        'use_re_open_after_auto_close' => 'bool',
        'version_nr' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accepted_bank_ids' => null,
        'accepted_country_codes' => null,
        'amount' => 'int64',
        'arbitrator_node_addresses' => null,
        'bank_id' => null,
        'base_currency_code' => null,
        'block_height_at_offer_creation' => 'int64',
        'buyer_security_deposit' => 'int64',
        'counter_currency_code' => null,
        'country_code' => null,
        'currency_code' => null,
        'date' => 'date-time',
        'direction' => null,
        'hash_of_challenge' => null,
        'id' => null,
        'is_currency_for_maker_fee_btc' => null,
        'is_private_offer' => null,
        'lower_close_price' => 'int64',
        'maker_fee' => 'int64',
        'maker_payment_account_id' => null,
        'market_price_margin' => 'double',
        'max_trade_limit' => 'int64',
        'max_trade_period' => 'int64',
        'min_amount' => 'int64',
        'offer_fee_payment_tx_id' => null,
        'owner_node_address' => null,
        'payment_method_id' => null,
        'price' => 'int64',
        'protocol_version' => 'int32',
        'seller_security_deposit' => 'int64',
        'state' => null,
        'tx_fee' => 'int64',
        'upper_close_price' => 'int64',
        'use_auto_close' => null,
        'use_market_based_price' => null,
        'use_re_open_after_auto_close' => null,
        'version_nr' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepted_bank_ids' => 'acceptedBankIds',
        'accepted_country_codes' => 'acceptedCountryCodes',
        'amount' => 'amount',
        'arbitrator_node_addresses' => 'arbitratorNodeAddresses',
        'bank_id' => 'bankId',
        'base_currency_code' => 'baseCurrencyCode',
        'block_height_at_offer_creation' => 'blockHeightAtOfferCreation',
        'buyer_security_deposit' => 'buyerSecurityDeposit',
        'counter_currency_code' => 'counterCurrencyCode',
        'country_code' => 'countryCode',
        'currency_code' => 'currencyCode',
        'date' => 'date',
        'direction' => 'direction',
        'hash_of_challenge' => 'hashOfChallenge',
        'id' => 'id',
        'is_currency_for_maker_fee_btc' => 'isCurrencyForMakerFeeBtc',
        'is_private_offer' => 'isPrivateOffer',
        'lower_close_price' => 'lowerClosePrice',
        'maker_fee' => 'makerFee',
        'maker_payment_account_id' => 'makerPaymentAccountId',
        'market_price_margin' => 'marketPriceMargin',
        'max_trade_limit' => 'maxTradeLimit',
        'max_trade_period' => 'maxTradePeriod',
        'min_amount' => 'minAmount',
        'offer_fee_payment_tx_id' => 'offerFeePaymentTxId',
        'owner_node_address' => 'ownerNodeAddress',
        'payment_method_id' => 'paymentMethodId',
        'price' => 'price',
        'protocol_version' => 'protocolVersion',
        'seller_security_deposit' => 'sellerSecurityDeposit',
        'state' => 'state',
        'tx_fee' => 'txFee',
        'upper_close_price' => 'upperClosePrice',
        'use_auto_close' => 'useAutoClose',
        'use_market_based_price' => 'useMarketBasedPrice',
        'use_re_open_after_auto_close' => 'useReOpenAfterAutoClose',
        'version_nr' => 'versionNr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepted_bank_ids' => 'setAcceptedBankIds',
        'accepted_country_codes' => 'setAcceptedCountryCodes',
        'amount' => 'setAmount',
        'arbitrator_node_addresses' => 'setArbitratorNodeAddresses',
        'bank_id' => 'setBankId',
        'base_currency_code' => 'setBaseCurrencyCode',
        'block_height_at_offer_creation' => 'setBlockHeightAtOfferCreation',
        'buyer_security_deposit' => 'setBuyerSecurityDeposit',
        'counter_currency_code' => 'setCounterCurrencyCode',
        'country_code' => 'setCountryCode',
        'currency_code' => 'setCurrencyCode',
        'date' => 'setDate',
        'direction' => 'setDirection',
        'hash_of_challenge' => 'setHashOfChallenge',
        'id' => 'setId',
        'is_currency_for_maker_fee_btc' => 'setIsCurrencyForMakerFeeBtc',
        'is_private_offer' => 'setIsPrivateOffer',
        'lower_close_price' => 'setLowerClosePrice',
        'maker_fee' => 'setMakerFee',
        'maker_payment_account_id' => 'setMakerPaymentAccountId',
        'market_price_margin' => 'setMarketPriceMargin',
        'max_trade_limit' => 'setMaxTradeLimit',
        'max_trade_period' => 'setMaxTradePeriod',
        'min_amount' => 'setMinAmount',
        'offer_fee_payment_tx_id' => 'setOfferFeePaymentTxId',
        'owner_node_address' => 'setOwnerNodeAddress',
        'payment_method_id' => 'setPaymentMethodId',
        'price' => 'setPrice',
        'protocol_version' => 'setProtocolVersion',
        'seller_security_deposit' => 'setSellerSecurityDeposit',
        'state' => 'setState',
        'tx_fee' => 'setTxFee',
        'upper_close_price' => 'setUpperClosePrice',
        'use_auto_close' => 'setUseAutoClose',
        'use_market_based_price' => 'setUseMarketBasedPrice',
        'use_re_open_after_auto_close' => 'setUseReOpenAfterAutoClose',
        'version_nr' => 'setVersionNr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepted_bank_ids' => 'getAcceptedBankIds',
        'accepted_country_codes' => 'getAcceptedCountryCodes',
        'amount' => 'getAmount',
        'arbitrator_node_addresses' => 'getArbitratorNodeAddresses',
        'bank_id' => 'getBankId',
        'base_currency_code' => 'getBaseCurrencyCode',
        'block_height_at_offer_creation' => 'getBlockHeightAtOfferCreation',
        'buyer_security_deposit' => 'getBuyerSecurityDeposit',
        'counter_currency_code' => 'getCounterCurrencyCode',
        'country_code' => 'getCountryCode',
        'currency_code' => 'getCurrencyCode',
        'date' => 'getDate',
        'direction' => 'getDirection',
        'hash_of_challenge' => 'getHashOfChallenge',
        'id' => 'getId',
        'is_currency_for_maker_fee_btc' => 'getIsCurrencyForMakerFeeBtc',
        'is_private_offer' => 'getIsPrivateOffer',
        'lower_close_price' => 'getLowerClosePrice',
        'maker_fee' => 'getMakerFee',
        'maker_payment_account_id' => 'getMakerPaymentAccountId',
        'market_price_margin' => 'getMarketPriceMargin',
        'max_trade_limit' => 'getMaxTradeLimit',
        'max_trade_period' => 'getMaxTradePeriod',
        'min_amount' => 'getMinAmount',
        'offer_fee_payment_tx_id' => 'getOfferFeePaymentTxId',
        'owner_node_address' => 'getOwnerNodeAddress',
        'payment_method_id' => 'getPaymentMethodId',
        'price' => 'getPrice',
        'protocol_version' => 'getProtocolVersion',
        'seller_security_deposit' => 'getSellerSecurityDeposit',
        'state' => 'getState',
        'tx_fee' => 'getTxFee',
        'upper_close_price' => 'getUpperClosePrice',
        'use_auto_close' => 'getUseAutoClose',
        'use_market_based_price' => 'getUseMarketBasedPrice',
        'use_re_open_after_auto_close' => 'getUseReOpenAfterAutoClose',
        'version_nr' => 'getVersionNr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIRECTION_BUY = 'BUY';
    const DIRECTION_SELL = 'SELL';
    const STATE_UNKNOWN = 'UNKNOWN';
    const STATE_OFFER_FEE_PAID = 'OFFER_FEE_PAID';
    const STATE_AVAILABLE = 'AVAILABLE';
    const STATE_NOT_AVAILABLE = 'NOT_AVAILABLE';
    const STATE_REMOVED = 'REMOVED';
    const STATE_MAKER_OFFLINE = 'MAKER_OFFLINE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_BUY,
            self::DIRECTION_SELL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_UNKNOWN,
            self::STATE_OFFER_FEE_PAID,
            self::STATE_AVAILABLE,
            self::STATE_NOT_AVAILABLE,
            self::STATE_REMOVED,
            self::STATE_MAKER_OFFLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepted_bank_ids'] = isset($data['accepted_bank_ids']) ? $data['accepted_bank_ids'] : null;
        $this->container['accepted_country_codes'] = isset($data['accepted_country_codes']) ? $data['accepted_country_codes'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['arbitrator_node_addresses'] = isset($data['arbitrator_node_addresses']) ? $data['arbitrator_node_addresses'] : null;
        $this->container['bank_id'] = isset($data['bank_id']) ? $data['bank_id'] : null;
        $this->container['base_currency_code'] = isset($data['base_currency_code']) ? $data['base_currency_code'] : null;
        $this->container['block_height_at_offer_creation'] = isset($data['block_height_at_offer_creation']) ? $data['block_height_at_offer_creation'] : null;
        $this->container['buyer_security_deposit'] = isset($data['buyer_security_deposit']) ? $data['buyer_security_deposit'] : null;
        $this->container['counter_currency_code'] = isset($data['counter_currency_code']) ? $data['counter_currency_code'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['hash_of_challenge'] = isset($data['hash_of_challenge']) ? $data['hash_of_challenge'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_currency_for_maker_fee_btc'] = isset($data['is_currency_for_maker_fee_btc']) ? $data['is_currency_for_maker_fee_btc'] : null;
        $this->container['is_private_offer'] = isset($data['is_private_offer']) ? $data['is_private_offer'] : null;
        $this->container['lower_close_price'] = isset($data['lower_close_price']) ? $data['lower_close_price'] : null;
        $this->container['maker_fee'] = isset($data['maker_fee']) ? $data['maker_fee'] : null;
        $this->container['maker_payment_account_id'] = isset($data['maker_payment_account_id']) ? $data['maker_payment_account_id'] : null;
        $this->container['market_price_margin'] = isset($data['market_price_margin']) ? $data['market_price_margin'] : null;
        $this->container['max_trade_limit'] = isset($data['max_trade_limit']) ? $data['max_trade_limit'] : null;
        $this->container['max_trade_period'] = isset($data['max_trade_period']) ? $data['max_trade_period'] : null;
        $this->container['min_amount'] = isset($data['min_amount']) ? $data['min_amount'] : null;
        $this->container['offer_fee_payment_tx_id'] = isset($data['offer_fee_payment_tx_id']) ? $data['offer_fee_payment_tx_id'] : null;
        $this->container['owner_node_address'] = isset($data['owner_node_address']) ? $data['owner_node_address'] : null;
        $this->container['payment_method_id'] = isset($data['payment_method_id']) ? $data['payment_method_id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['protocol_version'] = isset($data['protocol_version']) ? $data['protocol_version'] : null;
        $this->container['seller_security_deposit'] = isset($data['seller_security_deposit']) ? $data['seller_security_deposit'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['tx_fee'] = isset($data['tx_fee']) ? $data['tx_fee'] : null;
        $this->container['upper_close_price'] = isset($data['upper_close_price']) ? $data['upper_close_price'] : null;
        $this->container['use_auto_close'] = isset($data['use_auto_close']) ? $data['use_auto_close'] : null;
        $this->container['use_market_based_price'] = isset($data['use_market_based_price']) ? $data['use_market_based_price'] : null;
        $this->container['use_re_open_after_auto_close'] = isset($data['use_re_open_after_auto_close']) ? $data['use_re_open_after_auto_close'] : null;
        $this->container['version_nr'] = isset($data['version_nr']) ? $data['version_nr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            return false;
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            return false;
        }
        return true;
    }


    /**
     * Gets accepted_bank_ids
     *
     * @return string[]
     */
    public function getAcceptedBankIds()
    {
        return $this->container['accepted_bank_ids'];
    }

    /**
     * Sets accepted_bank_ids
     *
     * @param string[] $accepted_bank_ids accepted_bank_ids
     *
     * @return $this
     */
    public function setAcceptedBankIds($accepted_bank_ids)
    {
        $this->container['accepted_bank_ids'] = $accepted_bank_ids;

        return $this;
    }

    /**
     * Gets accepted_country_codes
     *
     * @return string[]
     */
    public function getAcceptedCountryCodes()
    {
        return $this->container['accepted_country_codes'];
    }

    /**
     * Sets accepted_country_codes
     *
     * @param string[] $accepted_country_codes accepted_country_codes
     *
     * @return $this
     */
    public function setAcceptedCountryCodes($accepted_country_codes)
    {
        $this->container['accepted_country_codes'] = $accepted_country_codes;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets arbitrator_node_addresses
     *
     * @return string[]
     */
    public function getArbitratorNodeAddresses()
    {
        return $this->container['arbitrator_node_addresses'];
    }

    /**
     * Sets arbitrator_node_addresses
     *
     * @param string[] $arbitrator_node_addresses arbitrator_node_addresses
     *
     * @return $this
     */
    public function setArbitratorNodeAddresses($arbitrator_node_addresses)
    {
        $this->container['arbitrator_node_addresses'] = $arbitrator_node_addresses;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param string $bank_id bank_id
     *
     * @return $this
     */
    public function setBankId($bank_id)
    {
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets base_currency_code
     *
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['base_currency_code'];
    }

    /**
     * Sets base_currency_code
     *
     * @param string $base_currency_code base_currency_code
     *
     * @return $this
     */
    public function setBaseCurrencyCode($base_currency_code)
    {
        $this->container['base_currency_code'] = $base_currency_code;

        return $this;
    }

    /**
     * Gets block_height_at_offer_creation
     *
     * @return int
     */
    public function getBlockHeightAtOfferCreation()
    {
        return $this->container['block_height_at_offer_creation'];
    }

    /**
     * Sets block_height_at_offer_creation
     *
     * @param int $block_height_at_offer_creation block_height_at_offer_creation
     *
     * @return $this
     */
    public function setBlockHeightAtOfferCreation($block_height_at_offer_creation)
    {
        $this->container['block_height_at_offer_creation'] = $block_height_at_offer_creation;

        return $this;
    }

    /**
     * Gets buyer_security_deposit
     *
     * @return int
     */
    public function getBuyerSecurityDeposit()
    {
        return $this->container['buyer_security_deposit'];
    }

    /**
     * Sets buyer_security_deposit
     *
     * @param int $buyer_security_deposit buyer_security_deposit
     *
     * @return $this
     */
    public function setBuyerSecurityDeposit($buyer_security_deposit)
    {
        $this->container['buyer_security_deposit'] = $buyer_security_deposit;

        return $this;
    }

    /**
     * Gets counter_currency_code
     *
     * @return string
     */
    public function getCounterCurrencyCode()
    {
        return $this->container['counter_currency_code'];
    }

    /**
     * Sets counter_currency_code
     *
     * @param string $counter_currency_code counter_currency_code
     *
     * @return $this
     */
    public function setCounterCurrencyCode($counter_currency_code)
    {
        $this->container['counter_currency_code'] = $counter_currency_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction direction
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets hash_of_challenge
     *
     * @return string
     */
    public function getHashOfChallenge()
    {
        return $this->container['hash_of_challenge'];
    }

    /**
     * Sets hash_of_challenge
     *
     * @param string $hash_of_challenge hash_of_challenge
     *
     * @return $this
     */
    public function setHashOfChallenge($hash_of_challenge)
    {
        $this->container['hash_of_challenge'] = $hash_of_challenge;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_currency_for_maker_fee_btc
     *
     * @return bool
     */
    public function getIsCurrencyForMakerFeeBtc()
    {
        return $this->container['is_currency_for_maker_fee_btc'];
    }

    /**
     * Sets is_currency_for_maker_fee_btc
     *
     * @param bool $is_currency_for_maker_fee_btc is_currency_for_maker_fee_btc
     *
     * @return $this
     */
    public function setIsCurrencyForMakerFeeBtc($is_currency_for_maker_fee_btc)
    {
        $this->container['is_currency_for_maker_fee_btc'] = $is_currency_for_maker_fee_btc;

        return $this;
    }

    /**
     * Gets is_private_offer
     *
     * @return bool
     */
    public function getIsPrivateOffer()
    {
        return $this->container['is_private_offer'];
    }

    /**
     * Sets is_private_offer
     *
     * @param bool $is_private_offer is_private_offer
     *
     * @return $this
     */
    public function setIsPrivateOffer($is_private_offer)
    {
        $this->container['is_private_offer'] = $is_private_offer;

        return $this;
    }

    /**
     * Gets lower_close_price
     *
     * @return int
     */
    public function getLowerClosePrice()
    {
        return $this->container['lower_close_price'];
    }

    /**
     * Sets lower_close_price
     *
     * @param int $lower_close_price lower_close_price
     *
     * @return $this
     */
    public function setLowerClosePrice($lower_close_price)
    {
        $this->container['lower_close_price'] = $lower_close_price;

        return $this;
    }

    /**
     * Gets maker_fee
     *
     * @return int
     */
    public function getMakerFee()
    {
        return $this->container['maker_fee'];
    }

    /**
     * Sets maker_fee
     *
     * @param int $maker_fee maker_fee
     *
     * @return $this
     */
    public function setMakerFee($maker_fee)
    {
        $this->container['maker_fee'] = $maker_fee;

        return $this;
    }

    /**
     * Gets maker_payment_account_id
     *
     * @return string
     */
    public function getMakerPaymentAccountId()
    {
        return $this->container['maker_payment_account_id'];
    }

    /**
     * Sets maker_payment_account_id
     *
     * @param string $maker_payment_account_id maker_payment_account_id
     *
     * @return $this
     */
    public function setMakerPaymentAccountId($maker_payment_account_id)
    {
        $this->container['maker_payment_account_id'] = $maker_payment_account_id;

        return $this;
    }

    /**
     * Gets market_price_margin
     *
     * @return double
     */
    public function getMarketPriceMargin()
    {
        return $this->container['market_price_margin'];
    }

    /**
     * Sets market_price_margin
     *
     * @param double $market_price_margin market_price_margin
     *
     * @return $this
     */
    public function setMarketPriceMargin($market_price_margin)
    {
        $this->container['market_price_margin'] = $market_price_margin;

        return $this;
    }

    /**
     * Gets max_trade_limit
     *
     * @return int
     */
    public function getMaxTradeLimit()
    {
        return $this->container['max_trade_limit'];
    }

    /**
     * Sets max_trade_limit
     *
     * @param int $max_trade_limit max_trade_limit
     *
     * @return $this
     */
    public function setMaxTradeLimit($max_trade_limit)
    {
        $this->container['max_trade_limit'] = $max_trade_limit;

        return $this;
    }

    /**
     * Gets max_trade_period
     *
     * @return int
     */
    public function getMaxTradePeriod()
    {
        return $this->container['max_trade_period'];
    }

    /**
     * Sets max_trade_period
     *
     * @param int $max_trade_period max_trade_period
     *
     * @return $this
     */
    public function setMaxTradePeriod($max_trade_period)
    {
        $this->container['max_trade_period'] = $max_trade_period;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return int
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param int $min_amount min_amount
     *
     * @return $this
     */
    public function setMinAmount($min_amount)
    {
        $this->container['min_amount'] = $min_amount;

        return $this;
    }

    /**
     * Gets offer_fee_payment_tx_id
     *
     * @return string
     */
    public function getOfferFeePaymentTxId()
    {
        return $this->container['offer_fee_payment_tx_id'];
    }

    /**
     * Sets offer_fee_payment_tx_id
     *
     * @param string $offer_fee_payment_tx_id offer_fee_payment_tx_id
     *
     * @return $this
     */
    public function setOfferFeePaymentTxId($offer_fee_payment_tx_id)
    {
        $this->container['offer_fee_payment_tx_id'] = $offer_fee_payment_tx_id;

        return $this;
    }

    /**
     * Gets owner_node_address
     *
     * @return string
     */
    public function getOwnerNodeAddress()
    {
        return $this->container['owner_node_address'];
    }

    /**
     * Sets owner_node_address
     *
     * @param string $owner_node_address owner_node_address
     *
     * @return $this
     */
    public function setOwnerNodeAddress($owner_node_address)
    {
        $this->container['owner_node_address'] = $owner_node_address;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string $payment_method_id payment_method_id
     *
     * @return $this
     */
    public function setPaymentMethodId($payment_method_id)
    {
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets protocol_version
     *
     * @return int
     */
    public function getProtocolVersion()
    {
        return $this->container['protocol_version'];
    }

    /**
     * Sets protocol_version
     *
     * @param int $protocol_version protocol_version
     *
     * @return $this
     */
    public function setProtocolVersion($protocol_version)
    {
        $this->container['protocol_version'] = $protocol_version;

        return $this;
    }

    /**
     * Gets seller_security_deposit
     *
     * @return int
     */
    public function getSellerSecurityDeposit()
    {
        return $this->container['seller_security_deposit'];
    }

    /**
     * Sets seller_security_deposit
     *
     * @param int $seller_security_deposit seller_security_deposit
     *
     * @return $this
     */
    public function setSellerSecurityDeposit($seller_security_deposit)
    {
        $this->container['seller_security_deposit'] = $seller_security_deposit;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tx_fee
     *
     * @return int
     */
    public function getTxFee()
    {
        return $this->container['tx_fee'];
    }

    /**
     * Sets tx_fee
     *
     * @param int $tx_fee tx_fee
     *
     * @return $this
     */
    public function setTxFee($tx_fee)
    {
        $this->container['tx_fee'] = $tx_fee;

        return $this;
    }

    /**
     * Gets upper_close_price
     *
     * @return int
     */
    public function getUpperClosePrice()
    {
        return $this->container['upper_close_price'];
    }

    /**
     * Sets upper_close_price
     *
     * @param int $upper_close_price upper_close_price
     *
     * @return $this
     */
    public function setUpperClosePrice($upper_close_price)
    {
        $this->container['upper_close_price'] = $upper_close_price;

        return $this;
    }

    /**
     * Gets use_auto_close
     *
     * @return bool
     */
    public function getUseAutoClose()
    {
        return $this->container['use_auto_close'];
    }

    /**
     * Sets use_auto_close
     *
     * @param bool $use_auto_close use_auto_close
     *
     * @return $this
     */
    public function setUseAutoClose($use_auto_close)
    {
        $this->container['use_auto_close'] = $use_auto_close;

        return $this;
    }

    /**
     * Gets use_market_based_price
     *
     * @return bool
     */
    public function getUseMarketBasedPrice()
    {
        return $this->container['use_market_based_price'];
    }

    /**
     * Sets use_market_based_price
     *
     * @param bool $use_market_based_price use_market_based_price
     *
     * @return $this
     */
    public function setUseMarketBasedPrice($use_market_based_price)
    {
        $this->container['use_market_based_price'] = $use_market_based_price;

        return $this;
    }

    /**
     * Gets use_re_open_after_auto_close
     *
     * @return bool
     */
    public function getUseReOpenAfterAutoClose()
    {
        return $this->container['use_re_open_after_auto_close'];
    }

    /**
     * Sets use_re_open_after_auto_close
     *
     * @param bool $use_re_open_after_auto_close use_re_open_after_auto_close
     *
     * @return $this
     */
    public function setUseReOpenAfterAutoClose($use_re_open_after_auto_close)
    {
        $this->container['use_re_open_after_auto_close'] = $use_re_open_after_auto_close;

        return $this;
    }

    /**
     * Gets version_nr
     *
     * @return string
     */
    public function getVersionNr()
    {
        return $this->container['version_nr'];
    }

    /**
     * Sets version_nr
     *
     * @param string $version_nr version_nr
     *
     * @return $this
     */
    public function setVersionNr($version_nr)
    {
        $this->container['version_nr'] = $version_nr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


