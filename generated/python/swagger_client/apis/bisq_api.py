# coding: utf-8

"""
    The Bisq API

    API for the bisq exchange

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class BisqApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_list(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.account_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: AccountList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.account_list_with_http_info(**kwargs)
        else:
            (data) = self.account_list_with_http_info(**kwargs)
            return data

    def account_list_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.account_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: AccountList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/account_list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def currency_list(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.currency_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CurrencyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.currency_list_with_http_info(**kwargs)
        else:
            (data) = self.currency_list_with_http_info(**kwargs)
            return data

    def currency_list_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.currency_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CurrencyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method currency_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/currency_list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CurrencyList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def market_list(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.market_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: MarketList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.market_list_with_http_info(**kwargs)
        else:
            (data) = self.market_list_with_http_info(**kwargs)
            return data

    def market_list_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.market_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: MarketList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/market_list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MarketList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def move_funds_to_bisq_wallet(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.move_funds_to_bisq_wallet(async=True)
        >>> result = thread.get()

        :param async bool
        :param str trade_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.move_funds_to_bisq_wallet_with_http_info(**kwargs)
        else:
            (data) = self.move_funds_to_bisq_wallet_with_http_info(**kwargs)
            return data

    def move_funds_to_bisq_wallet_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.move_funds_to_bisq_wallet_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str trade_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_funds_to_bisq_wallet" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'trade_id' in params:
            query_params.append(('trade_id', params['trade_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/move_funds_to_bisq_wallet', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def offer_cancel(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_cancel(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offer_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.offer_cancel_with_http_info(**kwargs)
        else:
            (data) = self.offer_cancel_with_http_info(**kwargs)
            return data

    def offer_cancel_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_cancel_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offer_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offer_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_cancel" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offer_id' in params:
            query_params.append(('offer_id', params['offer_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/offer_cancel', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def offer_detail(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_detail(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offer_id:
        :return: OfferDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.offer_detail_with_http_info(**kwargs)
        else:
            (data) = self.offer_detail_with_http_info(**kwargs)
            return data

    def offer_detail_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_detail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offer_id:
        :return: OfferDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offer_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_detail" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offer_id' in params:
            query_params.append(('offer_id', params['offer_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/offer_detail', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OfferDetail',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def offer_list(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param str market:
        :param str status:
        :param str whose:
        :param int start:
        :param int end:
        :param int limit:
        :return: list[OfferDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.offer_list_with_http_info(**kwargs)
        else:
            (data) = self.offer_list_with_http_info(**kwargs)
            return data

    def offer_list_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str market:
        :param str status:
        :param str whose:
        :param int start:
        :param int end:
        :param int limit:
        :return: list[OfferDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market', 'status', 'whose', 'start', 'end', 'limit']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'market' in params:
            query_params.append(('market', params['market']))
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'whose' in params:
            query_params.append(('whose', params['whose']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'end' in params:
            query_params.append(('end', params['end']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/offer_list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[OfferDetail]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def offer_make(self, direction, price_type, market_pair, amount, min_amount, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_make(direction, price_type, market_pair, amount, min_amount, async=True)
        >>> result = thread.get()

        :param async bool
        :param str direction: (required)
        :param str price_type: (required)
        :param str market_pair: (required)
        :param float amount: (required)
        :param float min_amount: (required)
        :param str payment_account_id:
        :param float percentage_from_market_price:
        :param str fixed_price:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.offer_make_with_http_info(direction, price_type, market_pair, amount, min_amount, **kwargs)
        else:
            (data) = self.offer_make_with_http_info(direction, price_type, market_pair, amount, min_amount, **kwargs)
            return data

    def offer_make_with_http_info(self, direction, price_type, market_pair, amount, min_amount, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_make_with_http_info(direction, price_type, market_pair, amount, min_amount, async=True)
        >>> result = thread.get()

        :param async bool
        :param str direction: (required)
        :param str price_type: (required)
        :param str market_pair: (required)
        :param float amount: (required)
        :param float min_amount: (required)
        :param str payment_account_id:
        :param float percentage_from_market_price:
        :param str fixed_price:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'price_type', 'market_pair', 'amount', 'min_amount', 'payment_account_id', 'percentage_from_market_price', 'fixed_price']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_make" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `offer_make`")
        # verify the required parameter 'price_type' is set
        if ('price_type' not in params) or (params['price_type'] is None):
            raise ValueError("Missing the required parameter `price_type` when calling `offer_make`")
        # verify the required parameter 'market_pair' is set
        if ('market_pair' not in params) or (params['market_pair'] is None):
            raise ValueError("Missing the required parameter `market_pair` when calling `offer_make`")
        # verify the required parameter 'amount' is set
        if ('amount' not in params) or (params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `offer_make`")
        # verify the required parameter 'min_amount' is set
        if ('min_amount' not in params) or (params['min_amount'] is None):
            raise ValueError("Missing the required parameter `min_amount` when calling `offer_make`")

        if 'amount' in params and params['amount'] > 200000000:
            raise ValueError("Invalid value for parameter `amount` when calling `offer_make`, must be a value less than or equal to `200000000`")
        if 'amount' in params and params['amount'] < 100000:
            raise ValueError("Invalid value for parameter `amount` when calling `offer_make`, must be a value greater than or equal to `100000`")
        if 'min_amount' in params and params['min_amount'] > 200000000:
            raise ValueError("Invalid value for parameter `min_amount` when calling `offer_make`, must be a value less than or equal to `200000000`")
        if 'min_amount' in params and params['min_amount'] < 100000:
            raise ValueError("Invalid value for parameter `min_amount` when calling `offer_make`, must be a value greater than or equal to `100000`")
        if 'percentage_from_market_price' in params and params['percentage_from_market_price'] > 1:
            raise ValueError("Invalid value for parameter `percentage_from_market_price` when calling `offer_make`, must be a value less than or equal to `1`")
        if 'percentage_from_market_price' in params and params['percentage_from_market_price'] < -1:
            raise ValueError("Invalid value for parameter `percentage_from_market_price` when calling `offer_make`, must be a value greater than or equal to `-1`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'payment_account_id' in params:
            query_params.append(('payment_account_id', params['payment_account_id']))
        if 'direction' in params:
            query_params.append(('direction', params['direction']))
        if 'price_type' in params:
            query_params.append(('price_type', params['price_type']))
        if 'market_pair' in params:
            query_params.append(('market_pair', params['market_pair']))
        if 'percentage_from_market_price' in params:
            query_params.append(('percentage_from_market_price', params['percentage_from_market_price']))
        if 'fixed_price' in params:
            query_params.append(('fixed_price', params['fixed_price']))
        if 'amount' in params:
            query_params.append(('amount', params['amount']))
        if 'min_amount' in params:
            query_params.append(('min_amount', params['min_amount']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/offer_make', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def offer_take(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_take(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offer_id:
        :param str payment_account_id:
        :param str amount:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.offer_take_with_http_info(**kwargs)
        else:
            (data) = self.offer_take_with_http_info(**kwargs)
            return data

    def offer_take_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.offer_take_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offer_id:
        :param str payment_account_id:
        :param str amount:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offer_id', 'payment_account_id', 'amount']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_take" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offer_id' in params:
            query_params.append(('offer_id', params['offer_id']))
        if 'payment_account_id' in params:
            query_params.append(('payment_account_id', params['payment_account_id']))
        if 'amount' in params:
            query_params.append(('amount', params['amount']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/offer_take', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payment_received(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.payment_received(async=True)
        >>> result = thread.get()

        :param async bool
        :param str trade_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.payment_received_with_http_info(**kwargs)
        else:
            (data) = self.payment_received_with_http_info(**kwargs)
            return data

    def payment_received_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.payment_received_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str trade_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_received" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'trade_id' in params:
            query_params.append(('trade_id', params['trade_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/payment_received', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payment_started(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.payment_started(async=True)
        >>> result = thread.get()

        :param async bool
        :param str trade_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.payment_started_with_http_info(**kwargs)
        else:
            (data) = self.payment_started_with_http_info(**kwargs)
            return data

    def payment_started_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.payment_started_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str trade_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_started" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'trade_id' in params:
            query_params.append(('trade_id', params['trade_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/payment_started', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def trade_detail(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.trade_detail(async=True)
        >>> result = thread.get()

        :param async bool
        :param str trade_id:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.trade_detail_with_http_info(**kwargs)
        else:
            (data) = self.trade_detail_with_http_info(**kwargs)
            return data

    def trade_detail_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.trade_detail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str trade_id:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_detail" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'trade_id' in params:
            query_params.append(('trade_id', params['trade_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/trade_detail', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def trade_list(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.trade_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.trade_list_with_http_info(**kwargs)
        else:
            (data) = self.trade_list_with_http_info(**kwargs)
            return data

    def trade_list_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.trade_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/trade_list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def wallet_addresses(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.wallet_addresses(async=True)
        >>> result = thread.get()

        :param async bool
        :param str status:
        :param int start:
        :param int limit:
        :return: list[WalletAddress]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.wallet_addresses_with_http_info(**kwargs)
        else:
            (data) = self.wallet_addresses_with_http_info(**kwargs)
            return data

    def wallet_addresses_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.wallet_addresses_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str status:
        :param int start:
        :param int limit:
        :return: list[WalletAddress]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'start', 'limit']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_addresses" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/wallet_addresses', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[WalletAddress]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def wallet_detail(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.wallet_detail(async=True)
        >>> result = thread.get()

        :param async bool
        :return: WalletDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.wallet_detail_with_http_info(**kwargs)
        else:
            (data) = self.wallet_detail_with_http_info(**kwargs)
            return data

    def wallet_detail_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.wallet_detail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: WalletDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_detail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/wallet_detail', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WalletDetails',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def wallet_transaction_list(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.wallet_transaction_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int start:
        :param int end:
        :param int limit:
        :return: WalletTransactions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.wallet_transaction_list_with_http_info(**kwargs)
        else:
            (data) = self.wallet_transaction_list_with_http_info(**kwargs)
            return data

    def wallet_transaction_list_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.wallet_transaction_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int start:
        :param int end:
        :param int limit:
        :return: WalletTransactions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'limit']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wallet_transaction_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'end' in params:
            query_params.append(('end', params['end']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/wallet_tx_list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WalletTransactions',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
