# coding: utf-8

"""
    The Bisq API

    API for the Bisq exchange

    OpenAPI spec version: 1
    Contact: Use the Bisq's project support channels
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OfferDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'direction': 'str',
        'state': 'str',
        'created': 'datetime',
        'arbitrators': 'list[str]',
        'offerer': 'str',
        'btc_amount': 'str',
        'min_btc_amount': 'str',
        'other_amount': 'str',
        'other_currency': 'str',
        'price_detail': 'PriceDetail'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'direction': 'direction',
        'state': 'state',
        'created': 'created',
        'arbitrators': 'arbitrators',
        'offerer': 'offerer',
        'btc_amount': 'btc_amount',
        'min_btc_amount': 'min_btc_amount',
        'other_amount': 'other_amount',
        'other_currency': 'other_currency',
        'price_detail': 'price_detail'
    }

    def __init__(self, offer_id=None, direction=None, state=None, created=None, arbitrators=None, offerer=None, btc_amount=None, min_btc_amount=None, other_amount=None, other_currency=None, price_detail=None):
        """
        OfferDetail - a model defined in Swagger
        """

        self._offer_id = None
        self._direction = None
        self._state = None
        self._created = None
        self._arbitrators = None
        self._offerer = None
        self._btc_amount = None
        self._min_btc_amount = None
        self._other_amount = None
        self._other_currency = None
        self._price_detail = None
        self.discriminator = None

        if offer_id is not None:
          self.offer_id = offer_id
        if direction is not None:
          self.direction = direction
        if state is not None:
          self.state = state
        if created is not None:
          self.created = created
        if arbitrators is not None:
          self.arbitrators = arbitrators
        if offerer is not None:
          self.offerer = offerer
        if btc_amount is not None:
          self.btc_amount = btc_amount
        if min_btc_amount is not None:
          self.min_btc_amount = min_btc_amount
        if other_amount is not None:
          self.other_amount = other_amount
        if other_currency is not None:
          self.other_currency = other_currency
        if price_detail is not None:
          self.price_detail = price_detail

    @property
    def offer_id(self):
        """
        Gets the offer_id of this OfferDetail.

        :return: The offer_id of this OfferDetail.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """
        Sets the offer_id of this OfferDetail.

        :param offer_id: The offer_id of this OfferDetail.
        :type: str
        """

        self._offer_id = offer_id

    @property
    def direction(self):
        """
        Gets the direction of this OfferDetail.

        :return: The direction of this OfferDetail.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this OfferDetail.

        :param direction: The direction of this OfferDetail.
        :type: str
        """
        allowed_values = ["BUY", "SELL"]
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def state(self):
        """
        Gets the state of this OfferDetail.

        :return: The state of this OfferDetail.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this OfferDetail.

        :param state: The state of this OfferDetail.
        :type: str
        """
        allowed_values = ["UNKNOWN", "OFFER_FEE_PAID", "AVAILABLE", "NOT_AVAILABLE", "REMOVED", "MAKER_OFFLINE"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def created(self):
        """
        Gets the created of this OfferDetail.

        :return: The created of this OfferDetail.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this OfferDetail.

        :param created: The created of this OfferDetail.
        :type: datetime
        """

        self._created = created

    @property
    def arbitrators(self):
        """
        Gets the arbitrators of this OfferDetail.

        :return: The arbitrators of this OfferDetail.
        :rtype: list[str]
        """
        return self._arbitrators

    @arbitrators.setter
    def arbitrators(self, arbitrators):
        """
        Sets the arbitrators of this OfferDetail.

        :param arbitrators: The arbitrators of this OfferDetail.
        :type: list[str]
        """

        self._arbitrators = arbitrators

    @property
    def offerer(self):
        """
        Gets the offerer of this OfferDetail.

        :return: The offerer of this OfferDetail.
        :rtype: str
        """
        return self._offerer

    @offerer.setter
    def offerer(self, offerer):
        """
        Sets the offerer of this OfferDetail.

        :param offerer: The offerer of this OfferDetail.
        :type: str
        """

        self._offerer = offerer

    @property
    def btc_amount(self):
        """
        Gets the btc_amount of this OfferDetail.

        :return: The btc_amount of this OfferDetail.
        :rtype: str
        """
        return self._btc_amount

    @btc_amount.setter
    def btc_amount(self, btc_amount):
        """
        Sets the btc_amount of this OfferDetail.

        :param btc_amount: The btc_amount of this OfferDetail.
        :type: str
        """

        self._btc_amount = btc_amount

    @property
    def min_btc_amount(self):
        """
        Gets the min_btc_amount of this OfferDetail.

        :return: The min_btc_amount of this OfferDetail.
        :rtype: str
        """
        return self._min_btc_amount

    @min_btc_amount.setter
    def min_btc_amount(self, min_btc_amount):
        """
        Sets the min_btc_amount of this OfferDetail.

        :param min_btc_amount: The min_btc_amount of this OfferDetail.
        :type: str
        """

        self._min_btc_amount = min_btc_amount

    @property
    def other_amount(self):
        """
        Gets the other_amount of this OfferDetail.

        :return: The other_amount of this OfferDetail.
        :rtype: str
        """
        return self._other_amount

    @other_amount.setter
    def other_amount(self, other_amount):
        """
        Sets the other_amount of this OfferDetail.

        :param other_amount: The other_amount of this OfferDetail.
        :type: str
        """

        self._other_amount = other_amount

    @property
    def other_currency(self):
        """
        Gets the other_currency of this OfferDetail.

        :return: The other_currency of this OfferDetail.
        :rtype: str
        """
        return self._other_currency

    @other_currency.setter
    def other_currency(self, other_currency):
        """
        Sets the other_currency of this OfferDetail.

        :param other_currency: The other_currency of this OfferDetail.
        :type: str
        """

        self._other_currency = other_currency

    @property
    def price_detail(self):
        """
        Gets the price_detail of this OfferDetail.

        :return: The price_detail of this OfferDetail.
        :rtype: PriceDetail
        """
        return self._price_detail

    @price_detail.setter
    def price_detail(self, price_detail):
        """
        Sets the price_detail of this OfferDetail.

        :param price_detail: The price_detail of this OfferDetail.
        :type: PriceDetail
        """

        self._price_detail = price_detail

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OfferDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
