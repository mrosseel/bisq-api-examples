# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OfferDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accepted_bank_ids': 'list[str]',
        'accepted_country_codes': 'list[str]',
        'amount': 'int',
        'arbitrator_node_addresses': 'list[str]',
        'bank_id': 'str',
        'base_currency_code': 'str',
        'block_height_at_offer_creation': 'int',
        'buyer_security_deposit': 'int',
        'counter_currency_code': 'str',
        'country_code': 'str',
        'currency_code': 'str',
        '_date': 'datetime',
        'direction': 'str',
        'hash_of_challenge': 'str',
        'id': 'str',
        'is_currency_for_maker_fee_btc': 'bool',
        'is_private_offer': 'bool',
        'lower_close_price': 'int',
        'maker_fee': 'int',
        'maker_payment_account_id': 'str',
        'market_price_margin': 'float',
        'max_trade_limit': 'int',
        'max_trade_period': 'int',
        'min_amount': 'int',
        'offer_fee_payment_tx_id': 'str',
        'owner_node_address': 'str',
        'payment_method_id': 'str',
        'price': 'int',
        'protocol_version': 'int',
        'seller_security_deposit': 'int',
        'state': 'str',
        'tx_fee': 'int',
        'upper_close_price': 'int',
        'use_auto_close': 'bool',
        'use_market_based_price': 'bool',
        'use_re_open_after_auto_close': 'bool',
        'version_nr': 'str'
    }

    attribute_map = {
        'accepted_bank_ids': 'acceptedBankIds',
        'accepted_country_codes': 'acceptedCountryCodes',
        'amount': 'amount',
        'arbitrator_node_addresses': 'arbitratorNodeAddresses',
        'bank_id': 'bankId',
        'base_currency_code': 'baseCurrencyCode',
        'block_height_at_offer_creation': 'blockHeightAtOfferCreation',
        'buyer_security_deposit': 'buyerSecurityDeposit',
        'counter_currency_code': 'counterCurrencyCode',
        'country_code': 'countryCode',
        'currency_code': 'currencyCode',
        '_date': 'date',
        'direction': 'direction',
        'hash_of_challenge': 'hashOfChallenge',
        'id': 'id',
        'is_currency_for_maker_fee_btc': 'isCurrencyForMakerFeeBtc',
        'is_private_offer': 'isPrivateOffer',
        'lower_close_price': 'lowerClosePrice',
        'maker_fee': 'makerFee',
        'maker_payment_account_id': 'makerPaymentAccountId',
        'market_price_margin': 'marketPriceMargin',
        'max_trade_limit': 'maxTradeLimit',
        'max_trade_period': 'maxTradePeriod',
        'min_amount': 'minAmount',
        'offer_fee_payment_tx_id': 'offerFeePaymentTxId',
        'owner_node_address': 'ownerNodeAddress',
        'payment_method_id': 'paymentMethodId',
        'price': 'price',
        'protocol_version': 'protocolVersion',
        'seller_security_deposit': 'sellerSecurityDeposit',
        'state': 'state',
        'tx_fee': 'txFee',
        'upper_close_price': 'upperClosePrice',
        'use_auto_close': 'useAutoClose',
        'use_market_based_price': 'useMarketBasedPrice',
        'use_re_open_after_auto_close': 'useReOpenAfterAutoClose',
        'version_nr': 'versionNr'
    }

    def __init__(self, accepted_bank_ids=None, accepted_country_codes=None, amount=None, arbitrator_node_addresses=None, bank_id=None, base_currency_code=None, block_height_at_offer_creation=None, buyer_security_deposit=None, counter_currency_code=None, country_code=None, currency_code=None, _date=None, direction=None, hash_of_challenge=None, id=None, is_currency_for_maker_fee_btc=None, is_private_offer=None, lower_close_price=None, maker_fee=None, maker_payment_account_id=None, market_price_margin=None, max_trade_limit=None, max_trade_period=None, min_amount=None, offer_fee_payment_tx_id=None, owner_node_address=None, payment_method_id=None, price=None, protocol_version=None, seller_security_deposit=None, state=None, tx_fee=None, upper_close_price=None, use_auto_close=None, use_market_based_price=None, use_re_open_after_auto_close=None, version_nr=None):  # noqa: E501
        """OfferDetail - a model defined in Swagger"""  # noqa: E501

        self._accepted_bank_ids = None
        self._accepted_country_codes = None
        self._amount = None
        self._arbitrator_node_addresses = None
        self._bank_id = None
        self._base_currency_code = None
        self._block_height_at_offer_creation = None
        self._buyer_security_deposit = None
        self._counter_currency_code = None
        self._country_code = None
        self._currency_code = None
        self.__date = None
        self._direction = None
        self._hash_of_challenge = None
        self._id = None
        self._is_currency_for_maker_fee_btc = None
        self._is_private_offer = None
        self._lower_close_price = None
        self._maker_fee = None
        self._maker_payment_account_id = None
        self._market_price_margin = None
        self._max_trade_limit = None
        self._max_trade_period = None
        self._min_amount = None
        self._offer_fee_payment_tx_id = None
        self._owner_node_address = None
        self._payment_method_id = None
        self._price = None
        self._protocol_version = None
        self._seller_security_deposit = None
        self._state = None
        self._tx_fee = None
        self._upper_close_price = None
        self._use_auto_close = None
        self._use_market_based_price = None
        self._use_re_open_after_auto_close = None
        self._version_nr = None
        self.discriminator = None

        if accepted_bank_ids is not None:
            self.accepted_bank_ids = accepted_bank_ids
        if accepted_country_codes is not None:
            self.accepted_country_codes = accepted_country_codes
        if amount is not None:
            self.amount = amount
        if arbitrator_node_addresses is not None:
            self.arbitrator_node_addresses = arbitrator_node_addresses
        if bank_id is not None:
            self.bank_id = bank_id
        if base_currency_code is not None:
            self.base_currency_code = base_currency_code
        if block_height_at_offer_creation is not None:
            self.block_height_at_offer_creation = block_height_at_offer_creation
        if buyer_security_deposit is not None:
            self.buyer_security_deposit = buyer_security_deposit
        if counter_currency_code is not None:
            self.counter_currency_code = counter_currency_code
        if country_code is not None:
            self.country_code = country_code
        if currency_code is not None:
            self.currency_code = currency_code
        if _date is not None:
            self._date = _date
        if direction is not None:
            self.direction = direction
        if hash_of_challenge is not None:
            self.hash_of_challenge = hash_of_challenge
        if id is not None:
            self.id = id
        if is_currency_for_maker_fee_btc is not None:
            self.is_currency_for_maker_fee_btc = is_currency_for_maker_fee_btc
        if is_private_offer is not None:
            self.is_private_offer = is_private_offer
        if lower_close_price is not None:
            self.lower_close_price = lower_close_price
        if maker_fee is not None:
            self.maker_fee = maker_fee
        if maker_payment_account_id is not None:
            self.maker_payment_account_id = maker_payment_account_id
        if market_price_margin is not None:
            self.market_price_margin = market_price_margin
        if max_trade_limit is not None:
            self.max_trade_limit = max_trade_limit
        if max_trade_period is not None:
            self.max_trade_period = max_trade_period
        if min_amount is not None:
            self.min_amount = min_amount
        if offer_fee_payment_tx_id is not None:
            self.offer_fee_payment_tx_id = offer_fee_payment_tx_id
        if owner_node_address is not None:
            self.owner_node_address = owner_node_address
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if price is not None:
            self.price = price
        if protocol_version is not None:
            self.protocol_version = protocol_version
        if seller_security_deposit is not None:
            self.seller_security_deposit = seller_security_deposit
        if state is not None:
            self.state = state
        if tx_fee is not None:
            self.tx_fee = tx_fee
        if upper_close_price is not None:
            self.upper_close_price = upper_close_price
        if use_auto_close is not None:
            self.use_auto_close = use_auto_close
        if use_market_based_price is not None:
            self.use_market_based_price = use_market_based_price
        if use_re_open_after_auto_close is not None:
            self.use_re_open_after_auto_close = use_re_open_after_auto_close
        if version_nr is not None:
            self.version_nr = version_nr

    @property
    def accepted_bank_ids(self):
        """Gets the accepted_bank_ids of this OfferDetail.  # noqa: E501


        :return: The accepted_bank_ids of this OfferDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._accepted_bank_ids

    @accepted_bank_ids.setter
    def accepted_bank_ids(self, accepted_bank_ids):
        """Sets the accepted_bank_ids of this OfferDetail.


        :param accepted_bank_ids: The accepted_bank_ids of this OfferDetail.  # noqa: E501
        :type: list[str]
        """

        self._accepted_bank_ids = accepted_bank_ids

    @property
    def accepted_country_codes(self):
        """Gets the accepted_country_codes of this OfferDetail.  # noqa: E501


        :return: The accepted_country_codes of this OfferDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._accepted_country_codes

    @accepted_country_codes.setter
    def accepted_country_codes(self, accepted_country_codes):
        """Sets the accepted_country_codes of this OfferDetail.


        :param accepted_country_codes: The accepted_country_codes of this OfferDetail.  # noqa: E501
        :type: list[str]
        """

        self._accepted_country_codes = accepted_country_codes

    @property
    def amount(self):
        """Gets the amount of this OfferDetail.  # noqa: E501


        :return: The amount of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OfferDetail.


        :param amount: The amount of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def arbitrator_node_addresses(self):
        """Gets the arbitrator_node_addresses of this OfferDetail.  # noqa: E501


        :return: The arbitrator_node_addresses of this OfferDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._arbitrator_node_addresses

    @arbitrator_node_addresses.setter
    def arbitrator_node_addresses(self, arbitrator_node_addresses):
        """Sets the arbitrator_node_addresses of this OfferDetail.


        :param arbitrator_node_addresses: The arbitrator_node_addresses of this OfferDetail.  # noqa: E501
        :type: list[str]
        """

        self._arbitrator_node_addresses = arbitrator_node_addresses

    @property
    def bank_id(self):
        """Gets the bank_id of this OfferDetail.  # noqa: E501


        :return: The bank_id of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this OfferDetail.


        :param bank_id: The bank_id of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._bank_id = bank_id

    @property
    def base_currency_code(self):
        """Gets the base_currency_code of this OfferDetail.  # noqa: E501


        :return: The base_currency_code of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """Sets the base_currency_code of this OfferDetail.


        :param base_currency_code: The base_currency_code of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._base_currency_code = base_currency_code

    @property
    def block_height_at_offer_creation(self):
        """Gets the block_height_at_offer_creation of this OfferDetail.  # noqa: E501


        :return: The block_height_at_offer_creation of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._block_height_at_offer_creation

    @block_height_at_offer_creation.setter
    def block_height_at_offer_creation(self, block_height_at_offer_creation):
        """Sets the block_height_at_offer_creation of this OfferDetail.


        :param block_height_at_offer_creation: The block_height_at_offer_creation of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._block_height_at_offer_creation = block_height_at_offer_creation

    @property
    def buyer_security_deposit(self):
        """Gets the buyer_security_deposit of this OfferDetail.  # noqa: E501


        :return: The buyer_security_deposit of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._buyer_security_deposit

    @buyer_security_deposit.setter
    def buyer_security_deposit(self, buyer_security_deposit):
        """Sets the buyer_security_deposit of this OfferDetail.


        :param buyer_security_deposit: The buyer_security_deposit of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._buyer_security_deposit = buyer_security_deposit

    @property
    def counter_currency_code(self):
        """Gets the counter_currency_code of this OfferDetail.  # noqa: E501


        :return: The counter_currency_code of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._counter_currency_code

    @counter_currency_code.setter
    def counter_currency_code(self, counter_currency_code):
        """Sets the counter_currency_code of this OfferDetail.


        :param counter_currency_code: The counter_currency_code of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._counter_currency_code = counter_currency_code

    @property
    def country_code(self):
        """Gets the country_code of this OfferDetail.  # noqa: E501


        :return: The country_code of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OfferDetail.


        :param country_code: The country_code of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def currency_code(self):
        """Gets the currency_code of this OfferDetail.  # noqa: E501


        :return: The currency_code of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this OfferDetail.


        :param currency_code: The currency_code of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def _date(self):
        """Gets the _date of this OfferDetail.  # noqa: E501


        :return: The _date of this OfferDetail.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this OfferDetail.


        :param _date: The _date of this OfferDetail.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def direction(self):
        """Gets the direction of this OfferDetail.  # noqa: E501


        :return: The direction of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this OfferDetail.


        :param direction: The direction of this OfferDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUY", "SELL"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def hash_of_challenge(self):
        """Gets the hash_of_challenge of this OfferDetail.  # noqa: E501


        :return: The hash_of_challenge of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._hash_of_challenge

    @hash_of_challenge.setter
    def hash_of_challenge(self, hash_of_challenge):
        """Sets the hash_of_challenge of this OfferDetail.


        :param hash_of_challenge: The hash_of_challenge of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._hash_of_challenge = hash_of_challenge

    @property
    def id(self):
        """Gets the id of this OfferDetail.  # noqa: E501


        :return: The id of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OfferDetail.


        :param id: The id of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_currency_for_maker_fee_btc(self):
        """Gets the is_currency_for_maker_fee_btc of this OfferDetail.  # noqa: E501


        :return: The is_currency_for_maker_fee_btc of this OfferDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_currency_for_maker_fee_btc

    @is_currency_for_maker_fee_btc.setter
    def is_currency_for_maker_fee_btc(self, is_currency_for_maker_fee_btc):
        """Sets the is_currency_for_maker_fee_btc of this OfferDetail.


        :param is_currency_for_maker_fee_btc: The is_currency_for_maker_fee_btc of this OfferDetail.  # noqa: E501
        :type: bool
        """

        self._is_currency_for_maker_fee_btc = is_currency_for_maker_fee_btc

    @property
    def is_private_offer(self):
        """Gets the is_private_offer of this OfferDetail.  # noqa: E501


        :return: The is_private_offer of this OfferDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_private_offer

    @is_private_offer.setter
    def is_private_offer(self, is_private_offer):
        """Sets the is_private_offer of this OfferDetail.


        :param is_private_offer: The is_private_offer of this OfferDetail.  # noqa: E501
        :type: bool
        """

        self._is_private_offer = is_private_offer

    @property
    def lower_close_price(self):
        """Gets the lower_close_price of this OfferDetail.  # noqa: E501


        :return: The lower_close_price of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._lower_close_price

    @lower_close_price.setter
    def lower_close_price(self, lower_close_price):
        """Sets the lower_close_price of this OfferDetail.


        :param lower_close_price: The lower_close_price of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._lower_close_price = lower_close_price

    @property
    def maker_fee(self):
        """Gets the maker_fee of this OfferDetail.  # noqa: E501


        :return: The maker_fee of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._maker_fee

    @maker_fee.setter
    def maker_fee(self, maker_fee):
        """Sets the maker_fee of this OfferDetail.


        :param maker_fee: The maker_fee of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._maker_fee = maker_fee

    @property
    def maker_payment_account_id(self):
        """Gets the maker_payment_account_id of this OfferDetail.  # noqa: E501


        :return: The maker_payment_account_id of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._maker_payment_account_id

    @maker_payment_account_id.setter
    def maker_payment_account_id(self, maker_payment_account_id):
        """Sets the maker_payment_account_id of this OfferDetail.


        :param maker_payment_account_id: The maker_payment_account_id of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._maker_payment_account_id = maker_payment_account_id

    @property
    def market_price_margin(self):
        """Gets the market_price_margin of this OfferDetail.  # noqa: E501


        :return: The market_price_margin of this OfferDetail.  # noqa: E501
        :rtype: float
        """
        return self._market_price_margin

    @market_price_margin.setter
    def market_price_margin(self, market_price_margin):
        """Sets the market_price_margin of this OfferDetail.


        :param market_price_margin: The market_price_margin of this OfferDetail.  # noqa: E501
        :type: float
        """

        self._market_price_margin = market_price_margin

    @property
    def max_trade_limit(self):
        """Gets the max_trade_limit of this OfferDetail.  # noqa: E501


        :return: The max_trade_limit of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._max_trade_limit

    @max_trade_limit.setter
    def max_trade_limit(self, max_trade_limit):
        """Sets the max_trade_limit of this OfferDetail.


        :param max_trade_limit: The max_trade_limit of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._max_trade_limit = max_trade_limit

    @property
    def max_trade_period(self):
        """Gets the max_trade_period of this OfferDetail.  # noqa: E501


        :return: The max_trade_period of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._max_trade_period

    @max_trade_period.setter
    def max_trade_period(self, max_trade_period):
        """Sets the max_trade_period of this OfferDetail.


        :param max_trade_period: The max_trade_period of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._max_trade_period = max_trade_period

    @property
    def min_amount(self):
        """Gets the min_amount of this OfferDetail.  # noqa: E501


        :return: The min_amount of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._min_amount

    @min_amount.setter
    def min_amount(self, min_amount):
        """Sets the min_amount of this OfferDetail.


        :param min_amount: The min_amount of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._min_amount = min_amount

    @property
    def offer_fee_payment_tx_id(self):
        """Gets the offer_fee_payment_tx_id of this OfferDetail.  # noqa: E501


        :return: The offer_fee_payment_tx_id of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._offer_fee_payment_tx_id

    @offer_fee_payment_tx_id.setter
    def offer_fee_payment_tx_id(self, offer_fee_payment_tx_id):
        """Sets the offer_fee_payment_tx_id of this OfferDetail.


        :param offer_fee_payment_tx_id: The offer_fee_payment_tx_id of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._offer_fee_payment_tx_id = offer_fee_payment_tx_id

    @property
    def owner_node_address(self):
        """Gets the owner_node_address of this OfferDetail.  # noqa: E501


        :return: The owner_node_address of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._owner_node_address

    @owner_node_address.setter
    def owner_node_address(self, owner_node_address):
        """Sets the owner_node_address of this OfferDetail.


        :param owner_node_address: The owner_node_address of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._owner_node_address = owner_node_address

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this OfferDetail.  # noqa: E501


        :return: The payment_method_id of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this OfferDetail.


        :param payment_method_id: The payment_method_id of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def price(self):
        """Gets the price of this OfferDetail.  # noqa: E501


        :return: The price of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OfferDetail.


        :param price: The price of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def protocol_version(self):
        """Gets the protocol_version of this OfferDetail.  # noqa: E501


        :return: The protocol_version of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this OfferDetail.


        :param protocol_version: The protocol_version of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._protocol_version = protocol_version

    @property
    def seller_security_deposit(self):
        """Gets the seller_security_deposit of this OfferDetail.  # noqa: E501


        :return: The seller_security_deposit of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._seller_security_deposit

    @seller_security_deposit.setter
    def seller_security_deposit(self, seller_security_deposit):
        """Sets the seller_security_deposit of this OfferDetail.


        :param seller_security_deposit: The seller_security_deposit of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._seller_security_deposit = seller_security_deposit

    @property
    def state(self):
        """Gets the state of this OfferDetail.  # noqa: E501


        :return: The state of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OfferDetail.


        :param state: The state of this OfferDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "OFFER_FEE_PAID", "AVAILABLE", "NOT_AVAILABLE", "REMOVED", "MAKER_OFFLINE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tx_fee(self):
        """Gets the tx_fee of this OfferDetail.  # noqa: E501


        :return: The tx_fee of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._tx_fee

    @tx_fee.setter
    def tx_fee(self, tx_fee):
        """Sets the tx_fee of this OfferDetail.


        :param tx_fee: The tx_fee of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._tx_fee = tx_fee

    @property
    def upper_close_price(self):
        """Gets the upper_close_price of this OfferDetail.  # noqa: E501


        :return: The upper_close_price of this OfferDetail.  # noqa: E501
        :rtype: int
        """
        return self._upper_close_price

    @upper_close_price.setter
    def upper_close_price(self, upper_close_price):
        """Sets the upper_close_price of this OfferDetail.


        :param upper_close_price: The upper_close_price of this OfferDetail.  # noqa: E501
        :type: int
        """

        self._upper_close_price = upper_close_price

    @property
    def use_auto_close(self):
        """Gets the use_auto_close of this OfferDetail.  # noqa: E501


        :return: The use_auto_close of this OfferDetail.  # noqa: E501
        :rtype: bool
        """
        return self._use_auto_close

    @use_auto_close.setter
    def use_auto_close(self, use_auto_close):
        """Sets the use_auto_close of this OfferDetail.


        :param use_auto_close: The use_auto_close of this OfferDetail.  # noqa: E501
        :type: bool
        """

        self._use_auto_close = use_auto_close

    @property
    def use_market_based_price(self):
        """Gets the use_market_based_price of this OfferDetail.  # noqa: E501


        :return: The use_market_based_price of this OfferDetail.  # noqa: E501
        :rtype: bool
        """
        return self._use_market_based_price

    @use_market_based_price.setter
    def use_market_based_price(self, use_market_based_price):
        """Sets the use_market_based_price of this OfferDetail.


        :param use_market_based_price: The use_market_based_price of this OfferDetail.  # noqa: E501
        :type: bool
        """

        self._use_market_based_price = use_market_based_price

    @property
    def use_re_open_after_auto_close(self):
        """Gets the use_re_open_after_auto_close of this OfferDetail.  # noqa: E501


        :return: The use_re_open_after_auto_close of this OfferDetail.  # noqa: E501
        :rtype: bool
        """
        return self._use_re_open_after_auto_close

    @use_re_open_after_auto_close.setter
    def use_re_open_after_auto_close(self, use_re_open_after_auto_close):
        """Sets the use_re_open_after_auto_close of this OfferDetail.


        :param use_re_open_after_auto_close: The use_re_open_after_auto_close of this OfferDetail.  # noqa: E501
        :type: bool
        """

        self._use_re_open_after_auto_close = use_re_open_after_auto_close

    @property
    def version_nr(self):
        """Gets the version_nr of this OfferDetail.  # noqa: E501


        :return: The version_nr of this OfferDetail.  # noqa: E501
        :rtype: str
        """
        return self._version_nr

    @version_nr.setter
    def version_nr(self, version_nr):
        """Sets the version_nr of this OfferDetail.


        :param version_nr: The version_nr of this OfferDetail.  # noqa: E501
        :type: str
        """

        self._version_nr = version_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
