# coding: utf-8

"""
    The Bisq API

    API for the Bisq exchange

    OpenAPI spec version: 1
    Contact: Use the Bisq's project support channels
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PriceDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_market_price': 'bool',
        'market_price_margin': 'float'
    }

    attribute_map = {
        'use_market_price': 'use_market_price',
        'market_price_margin': 'market_price_margin'
    }

    def __init__(self, use_market_price=None, market_price_margin=None):
        """
        PriceDetail - a model defined in Swagger
        """

        self._use_market_price = None
        self._market_price_margin = None
        self.discriminator = None

        if use_market_price is not None:
          self.use_market_price = use_market_price
        if market_price_margin is not None:
          self.market_price_margin = market_price_margin

    @property
    def use_market_price(self):
        """
        Gets the use_market_price of this PriceDetail.

        :return: The use_market_price of this PriceDetail.
        :rtype: bool
        """
        return self._use_market_price

    @use_market_price.setter
    def use_market_price(self, use_market_price):
        """
        Sets the use_market_price of this PriceDetail.

        :param use_market_price: The use_market_price of this PriceDetail.
        :type: bool
        """

        self._use_market_price = use_market_price

    @property
    def market_price_margin(self):
        """
        Gets the market_price_margin of this PriceDetail.

        :return: The market_price_margin of this PriceDetail.
        :rtype: float
        """
        return self._market_price_margin

    @market_price_margin.setter
    def market_price_margin(self, market_price_margin):
        """
        Sets the market_price_margin of this PriceDetail.

        :param market_price_margin: The market_price_margin of this PriceDetail.
        :type: float
        """

        self._market_price_margin = market_price_margin

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PriceDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
