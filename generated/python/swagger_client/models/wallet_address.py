# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WalletAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'balance': 'int',
        'confirmations': 'int',
        'context': 'str',
        'offer_id': 'str'
    }

    attribute_map = {
        'address': 'address',
        'balance': 'balance',
        'confirmations': 'confirmations',
        'context': 'context',
        'offer_id': 'offerId'
    }

    def __init__(self, address=None, balance=None, confirmations=None, context=None, offer_id=None):  # noqa: E501
        """WalletAddress - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._balance = None
        self._confirmations = None
        self._context = None
        self._offer_id = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if balance is not None:
            self.balance = balance
        if confirmations is not None:
            self.confirmations = confirmations
        if context is not None:
            self.context = context
        if offer_id is not None:
            self.offer_id = offer_id

    @property
    def address(self):
        """Gets the address of this WalletAddress.  # noqa: E501


        :return: The address of this WalletAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WalletAddress.


        :param address: The address of this WalletAddress.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def balance(self):
        """Gets the balance of this WalletAddress.  # noqa: E501


        :return: The balance of this WalletAddress.  # noqa: E501
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this WalletAddress.


        :param balance: The balance of this WalletAddress.  # noqa: E501
        :type: int
        """

        self._balance = balance

    @property
    def confirmations(self):
        """Gets the confirmations of this WalletAddress.  # noqa: E501


        :return: The confirmations of this WalletAddress.  # noqa: E501
        :rtype: int
        """
        return self._confirmations

    @confirmations.setter
    def confirmations(self, confirmations):
        """Sets the confirmations of this WalletAddress.


        :param confirmations: The confirmations of this WalletAddress.  # noqa: E501
        :type: int
        """

        self._confirmations = confirmations

    @property
    def context(self):
        """Gets the context of this WalletAddress.  # noqa: E501


        :return: The context of this WalletAddress.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this WalletAddress.


        :param context: The context of this WalletAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARBITRATOR", "AVAILABLE", "OFFER_FUNDING", "RESERVED_FOR_TRADE", "MULTI_SIG", "TRADE_PAYOUT"]  # noqa: E501
        if context not in allowed_values:
            raise ValueError(
                "Invalid value for `context` ({0}), must be one of {1}"  # noqa: E501
                .format(context, allowed_values)
            )

        self._context = context

    @property
    def offer_id(self):
        """Gets the offer_id of this WalletAddress.  # noqa: E501


        :return: The offer_id of this WalletAddress.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this WalletAddress.


        :param offer_id: The offer_id of this WalletAddress.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
