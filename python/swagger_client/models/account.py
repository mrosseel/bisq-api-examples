# coding: utf-8

"""
    The Bisq API

    API for the bisq exchange

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Account(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_account_id': 'str',
        'created': 'int',
        'account_name': 'str',
        'trade_currencies': 'list[str]',
        'payment_account_payload': 'str',
        'payment_method_details': 'ContractData'
    }

    attribute_map = {
        'payment_account_id': 'payment_account_id',
        'created': 'created',
        'account_name': 'account_name',
        'trade_currencies': 'trade_currencies',
        'payment_account_payload': 'paymentAccountPayload',
        'payment_method_details': 'payment_method_details'
    }

    def __init__(self, payment_account_id=None, created=None, account_name=None, trade_currencies=None, payment_account_payload=None, payment_method_details=None):
        """
        Account - a model defined in Swagger
        """

        self._payment_account_id = None
        self._created = None
        self._account_name = None
        self._trade_currencies = None
        self._payment_account_payload = None
        self._payment_method_details = None
        self.discriminator = None

        if payment_account_id is not None:
          self.payment_account_id = payment_account_id
        if created is not None:
          self.created = created
        if account_name is not None:
          self.account_name = account_name
        if trade_currencies is not None:
          self.trade_currencies = trade_currencies
        if payment_account_payload is not None:
          self.payment_account_payload = payment_account_payload
        if payment_method_details is not None:
          self.payment_method_details = payment_method_details

    @property
    def payment_account_id(self):
        """
        Gets the payment_account_id of this Account.

        :return: The payment_account_id of this Account.
        :rtype: str
        """
        return self._payment_account_id

    @payment_account_id.setter
    def payment_account_id(self, payment_account_id):
        """
        Sets the payment_account_id of this Account.

        :param payment_account_id: The payment_account_id of this Account.
        :type: str
        """

        self._payment_account_id = payment_account_id

    @property
    def created(self):
        """
        Gets the created of this Account.

        :return: The created of this Account.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Account.

        :param created: The created of this Account.
        :type: int
        """

        self._created = created

    @property
    def account_name(self):
        """
        Gets the account_name of this Account.

        :return: The account_name of this Account.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """
        Sets the account_name of this Account.

        :param account_name: The account_name of this Account.
        :type: str
        """

        self._account_name = account_name

    @property
    def trade_currencies(self):
        """
        Gets the trade_currencies of this Account.

        :return: The trade_currencies of this Account.
        :rtype: list[str]
        """
        return self._trade_currencies

    @trade_currencies.setter
    def trade_currencies(self, trade_currencies):
        """
        Sets the trade_currencies of this Account.

        :param trade_currencies: The trade_currencies of this Account.
        :type: list[str]
        """

        self._trade_currencies = trade_currencies

    @property
    def payment_account_payload(self):
        """
        Gets the payment_account_payload of this Account.

        :return: The payment_account_payload of this Account.
        :rtype: str
        """
        return self._payment_account_payload

    @payment_account_payload.setter
    def payment_account_payload(self, payment_account_payload):
        """
        Sets the payment_account_payload of this Account.

        :param payment_account_payload: The payment_account_payload of this Account.
        :type: str
        """

        self._payment_account_payload = payment_account_payload

    @property
    def payment_method_details(self):
        """
        Gets the payment_method_details of this Account.

        :return: The payment_method_details of this Account.
        :rtype: ContractData
        """
        return self._payment_method_details

    @payment_method_details.setter
    def payment_method_details(self, payment_method_details):
        """
        Sets the payment_method_details of this Account.

        :param payment_method_details: The payment_method_details of this Account.
        :type: ContractData
        """

        self._payment_method_details = payment_method_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
